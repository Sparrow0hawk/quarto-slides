[
  {
    "objectID": "2023-02-19-why-rust-for-research.html#whoami",
    "href": "2023-02-19-why-rust-for-research.html#whoami",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "whoami",
    "text": "whoami\n\nAlex Coleman\nResearch Software Engineer in IT Services\nBackground in cell biology, then data science, now software engineering\nSoftware Sustainability Institute Fellow 2023 looking at software security\nLanguages I‚Äôm into: Pythonüêç, Rustü¶Ä, R¬Æ"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#what-this-talk-is",
    "href": "2023-02-19-why-rust-for-research.html#what-this-talk-is",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "What this talk is",
    "text": "What this talk is\n\nAn introduction to the Rust language and its features\nA perspective on why it could be a good language for research\nSome thoughts on why it might not be the right language for your research"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#what-this-talk-is-not",
    "href": "2023-02-19-why-rust-for-research.html#what-this-talk-is-not",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "What this talk is not",
    "text": "What this talk is not\n\nA deep dive into the language\nA comprehensive comparison of Rust and other languages\nA call for you to write everything in Rust"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#what-is-rust",
    "href": "2023-02-19-why-rust-for-research.html#what-is-rust",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "What is Rust?",
    "text": "What is Rust?\n\nCompiled programming language that came out of Mozilla\nDesigned with an emphasis on security, peformance and usability\nInitially popular for systems based programming but very flexible"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#features",
    "href": "2023-02-19-why-rust-for-research.html#features",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "Features",
    "text": "Features\n\n\nMemory safety\nSpeed\nStrongly and statically typed\nZero cost abstractions\nA helpful compiler\nModern toolchain"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#features-ownership-and-borrowing",
    "href": "2023-02-19-why-rust-for-research.html#features-ownership-and-borrowing",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "Features: Ownership and borrowing",
    "text": "Features: Ownership and borrowing\n\n\nSystem by which Rust manages memory and avoids common issues\nRules of ownership:\n\nEach value must have an owner\nCan only be one owner at a time\nWhen the owner goes out of scope, the value is dropped\n\n\n\n\n// create some data on the heap\nlet s1 = String::from(\"hello\");\n// this invalidates s1 because ownership of the data has moved to s2\nlet s2 = s1;\n\n// this errors because s1 is no longer accessible\nprintln!(\"{}, world!\", s1);"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#ownership-and-borrowing-cont.",
    "href": "2023-02-19-why-rust-for-research.html#ownership-and-borrowing-cont.",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "Ownership and borrowing (cont.)",
    "text": "Ownership and borrowing (cont.)\n\n\nWhen passing data to a function we pass ownership to that function\nSometimes we don‚Äôt want data to go out of scope after being used in a function, so we borrow it with a reference\nCompiler checks these references via the borrow checker\n\n\n\nfn main() {\n    let s1 = String::from(\"hello\");\n    let len = calculate_length(&s1);\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#fearless-concurrency",
    "href": "2023-02-19-why-rust-for-research.html#fearless-concurrency",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "Fearless Concurrency",
    "text": "Fearless Concurrency\n\nThis ownership model extends to writing concurrent code\nThe compiler works to guarantee against data races in concurrent code\nUsing threads still requires us to be careful but the compiler protects against common issues"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#no-null-type",
    "href": "2023-02-19-why-rust-for-research.html#no-null-type",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "No NULL type",
    "text": "No NULL type\n\nLots of programming languages have a NULL or None type\nThis means we often have to remember to test if something is None\n\nAttributeError: 'NoneType' object has no attribute 'foo'\n\nRust uses an optional type and forces you to handle the None case"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#no-null-type-cont.",
    "href": "2023-02-19-why-rust-for-research.html#no-null-type-cont.",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "No NULL type (cont.)",
    "text": "No NULL type (cont.)\n\nTake this example in R\n\nval <- switch(\"foo\", \"foo\" = 1, \"bar\" = 2, \"foobar\" = 3)\nval\n[1] 1\n\nBut if I give an option no enumerated\n\nval <- switch(\"magic\", \"foo\" = 1, \"bar\" = 2, \"foobar\" = 3)\nval\n[1] NULL"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#no-null-type-cont.-1",
    "href": "2023-02-19-why-rust-for-research.html#no-null-type-cont.-1",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "No NULL type (cont.)",
    "text": "No NULL type (cont.)\n\nRust won‚Äôt compile this without the final catch-all arm\n\nlet input: &str = \"foo\";\nlet val: i32 = match input {\n  \"foo\" => 1,\n  \"bar\" => 2,\n  \"foobar\" => 3,\n  _ => panic!(\"Something bad happened here!\")\n};\nprintln!(\"{}\", val)"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#the-toolchain",
    "href": "2023-02-19-why-rust-for-research.html#the-toolchain",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "The toolchain",
    "text": "The toolchain\n\n\nRustup, toolchain installer and manager\nCargo, build system and package manager\ncrates.io, package repository\nClippy, Rust linter"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#a-little-rust-in-your-c",
    "href": "2023-02-19-why-rust-for-research.html#a-little-rust-in-your-c",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "A little Rust in your‚Ä¶ C",
    "text": "A little Rust in your‚Ä¶ C"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#a-little-rust-in-your-python",
    "href": "2023-02-19-why-rust-for-research.html#a-little-rust-in-your-python",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "A little Rust in your‚Ä¶ Python",
    "text": "A little Rust in your‚Ä¶ Python"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#a-little-rust-in-your-r",
    "href": "2023-02-19-why-rust-for-research.html#a-little-rust-in-your-r",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "A little Rust in your‚Ä¶ R",
    "text": "A little Rust in your‚Ä¶ R"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#the-community",
    "href": "2023-02-19-why-rust-for-research.html#the-community",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "The community",
    "text": "The community\n\nThe Rust Book\nThis Week in Rust\nr/rust\nRust Discord\nRust Zulip"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#the-compiler",
    "href": "2023-02-19-why-rust-for-research.html#the-compiler",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "The compiler",
    "text": "The compiler\n\nPeople often describe ‚Äúfighting with the borrow checker‚Äù\nThe strictness of the compiler can be infuriating\nIs slow compared to C and C++"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#bounds-checking",
    "href": "2023-02-19-why-rust-for-research.html#bounds-checking",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "Bounds checking",
    "text": "Bounds checking\n\nTo avoid buffer overflow Rust implements bounds checking when indexing arrays\n\nlet array = [0, 1, 2, 3];\nlet a = array[1]; // works\nlet b = array[6]; // not a valid index\n\nThis adds an overhead at runtime"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#the-learning-curve",
    "href": "2023-02-19-why-rust-for-research.html#the-learning-curve",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "The learning curve",
    "text": "The learning curve"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#section",
    "href": "2023-02-19-why-rust-for-research.html#section",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "",
    "text": "The toolchain makes it easy to distribute code\nGreat for performance critical code\nLots of resources to help learn\nBetter resource use means greenerüå≥"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#already-happening",
    "href": "2023-02-19-why-rust-for-research.html#already-happening",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "Already happening",
    "text": "Already happening\n\nPola.rs, high performance data frame library written in Rust\nndarray, n-dimensional array crate\nbio crate, implements a number of bioinformatics algorithms in Rust\nStatus of Rust support for machine learning\nRust MPI bindings\nGPGPU support"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#why-rust-might-not-be-for-your-research",
    "href": "2023-02-19-why-rust-for-research.html#why-rust-might-not-be-for-your-research",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "Why Rust might not be for your research?",
    "text": "Why Rust might not be for your research?\n\nLearning the language is hard\nIs the tradeoff of safety v. speed-of-development worth it?\nIs writing Rust sustainable in your research field/group?\nLacks the interactive programming experience of Jupyter/Rmarkdown"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#your-next-steps",
    "href": "2023-02-19-why-rust-for-research.html#your-next-steps",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "Your next steps",
    "text": "Your next steps\n\nGo read the Rust book\nTry out Rustlings\nCheck out The New Rustacean podcast\nExercism Rust track"
  },
  {
    "objectID": "2023-02-19-why-rust-for-research.html#further-readingwatching",
    "href": "2023-02-19-why-rust-for-research.html#further-readingwatching",
    "title": "Why Rust for Research?ü¶Ä",
    "section": "Further reading/watching",
    "text": "Further reading/watching\n\nConsidering Rust talk - Jon Gjengset\nWhy scientists are turning to Rust - Nature"
  },
  {
    "objectID": "2023-02-06-git-branch-lecture.html#what-is-branching",
    "href": "2023-02-06-git-branch-lecture.html#what-is-branching",
    "title": "Git Branching",
    "section": "What is branching?",
    "text": "What is branching?\n\nGit branches are lightweight, moveables pointers to a commit\nmain is the default branch created whenever you create a git repository\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true,'showCommitLabel': false, 'rotateCommitLabel': true}} }%%\n\ngitGraph\n    commit\n    commit\n    commit\n    branch branch1\n    commit"
  },
  {
    "objectID": "2023-02-06-git-branch-lecture.html#resolving-branches",
    "href": "2023-02-06-git-branch-lecture.html#resolving-branches",
    "title": "Git Branching",
    "section": "Resolving branches",
    "text": "Resolving branches\n\nBranches allow us to separate out work in git\nNeed a mechanism to resolve one branch into another (often main)\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true,'showCommitLabel': false, 'rotateCommitLabel': true}} }%%\n\ngitGraph\n    commit\n    commit\n    commit\n    branch branch1\n    commit\n    checkout main\n    merge branch1"
  },
  {
    "objectID": "2023-02-06-git-branch-lecture.html#complicated-resolutions",
    "href": "2023-02-06-git-branch-lecture.html#complicated-resolutions",
    "title": "Git Branching",
    "section": "Complicated resolutions",
    "text": "Complicated resolutions\n\nSay we worked on a branch but had to deploy a fix to main before merging\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true,'showCommitLabel': false, 'rotateCommitLabel': true}} }%%\n\ngitGraph\n    commit\n    commit\n    commit\n    branch branch1\n    commit\n    checkout main\n    commit tag: \"Fix added here\""
  },
  {
    "objectID": "2023-02-06-git-branch-lecture.html#complicated-resolutions-1",
    "href": "2023-02-06-git-branch-lecture.html#complicated-resolutions-1",
    "title": "Git Branching",
    "section": "Complicated resolutions",
    "text": "Complicated resolutions\n\nOption 1: Is to merge main into branch1\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true,'showCommitLabel': false, 'rotateCommitLabel': true}} }%%\n\ngitGraph\n    commit\n    commit\n    commit\n    branch branch1\n    commit\n    checkout main\n    commit tag: \"Fix added here\"\n    checkout branch1\n    merge main\n\n\n\n\n\n\n\n\n\n\nThis preserves history but adds an extra merge commit"
  },
  {
    "objectID": "2023-02-06-git-branch-lecture.html#complicated-resolutions-2",
    "href": "2023-02-06-git-branch-lecture.html#complicated-resolutions-2",
    "title": "Git Branching",
    "section": "Complicated resolutions",
    "text": "Complicated resolutions\n\nOption 2: Is to rebase branch1 ontop of main\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true,'showCommitLabel': false, 'rotateCommitLabel': true}} }%%\n\ngitGraph\n    commit\n    commit\n    commit\n    commit tag: \"Fix added here\"\n    branch branch1\n    commit\n\n\n\n\n\n\n\n\n\n\nThis rewrites history but keeps project history linear preventing merge commits\nRebasing should never be performed on a public branch"
  },
  {
    "objectID": "2023-02-06-git-branch-lecture.html#dvcs-and-branches",
    "href": "2023-02-06-git-branch-lecture.html#dvcs-and-branches",
    "title": "Git Branching",
    "section": "DVCS and Branches",
    "text": "DVCS and Branches\nTools like GitHub, Bitbucket, Gitlab expand the functionality of branches with mechanisms like:\n\nForks\nPull requests"
  },
  {
    "objectID": "2023-02-06-git-branch-lecture.html#forks",
    "href": "2023-02-06-git-branch-lecture.html#forks",
    "title": "Git Branching",
    "section": "Forks",
    "text": "Forks\n\nA fork is a form of branching\nWe take some existing code\nBranch off from it\nBut crucially development on the fork takes a different direction\nXEMACS and GNU Emacs\nMost Linux distros are forks"
  },
  {
    "objectID": "2023-02-06-git-branch-lecture.html#pull-requests",
    "href": "2023-02-06-git-branch-lecture.html#pull-requests",
    "title": "Git Branching",
    "section": "Pull requests",
    "text": "Pull requests\n\nTools like GitHub/BitBucket/Gitlab made it easier to share code and share code changes\nRather than sharing patch files, we can suggest code changes\nWe can make forks of code on these platforms, make a change and suggest the maintainer pull these suggestions back into the codebase\nThis workflow of sharing changes back is called a pull request"
  },
  {
    "objectID": "2023-02-06-git-branch-lecture.html#branching-strategies",
    "href": "2023-02-06-git-branch-lecture.html#branching-strategies",
    "title": "Git Branching",
    "section": "Branching strategies",
    "text": "Branching strategies\n\nHow do teams work collaboratively on a code base?\nNeed to define strategies for writing, merging and deploying code\nCommon set of rules for a dev team"
  },
  {
    "objectID": "2023-02-06-git-branch-lecture.html#gitflow",
    "href": "2023-02-06-git-branch-lecture.html#gitflow",
    "title": "Git Branching",
    "section": "Gitflow 1",
    "text": "Gitflow 1\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true,'showCommitLabel': false, 'rotateCommitLabel': true}} }%%\n\ngitGraph\n    commit tag: \"tag-0.1\"\n    branch hotfix1\n    branch release\n    branch develop\n    checkout develop\n    commit\n    commit\n    branch feat1\n    checkout develop\n    commit\n    branch feat2\n    checkout feat1\n    commit\n    commit\n    checkout develop\n    checkout feat2\n    commit\n    checkout hotfix1\n    commit\n    checkout main\n    merge hotfix1 tag: \"tag-0.2\"\n    checkout develop\n    merge hotfix1\n    checkout develop\n    merge feat1\n    checkout release\n    merge develop tag: \"tag-1.0\"\n\n\n\n\n\n\n\n\n\nOriginal gitflow blog post"
  },
  {
    "objectID": "2023-02-06-git-branch-lecture.html#github-flow",
    "href": "2023-02-06-git-branch-lecture.html#github-flow",
    "title": "Git Branching",
    "section": "GitHub Flow 1",
    "text": "GitHub Flow 1\n\nEach branch should have discrete purpose (feature/fix)\nSuggest it back as a pull request\nDelete branch when accepted\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true,'showCommitLabel': false, 'rotateCommitLabel': true}} }%%\n\ngitGraph\n    commit\n    commit\n    branch user2-fix\n    checkout main\n    commit\n    branch user1-feat\n    commit\n    checkout user2-fix\n    commit\n    commit\n    checkout user1-feat\n    checkout user1-feat\n    commit tag: \"PR submitted\"\n    checkout main\n    merge user1-feat tag: \"PR accepted\"\n    checkout user2-fix\n    commit\n\n\n\n\n\n\n\n\n GitHub docs"
  },
  {
    "objectID": "2023-02-06-git-branch-lecture.html#trunk-based",
    "href": "2023-02-06-git-branch-lecture.html#trunk-based",
    "title": "Git Branching",
    "section": "Trunk based 1",
    "text": "Trunk based 1\n\nEveryone commits to the main branch\nEnforces small commits\nmain should always be releaseable\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true,'showCommitLabel': false, 'rotateCommitLabel': true}} }%%\n\ngitGraph\n    commit\n    commit\n    commit\n    commit\n    commit\n    branch release-v1\n    commit tag: \"v1.0\"\n    checkout main\n    commit\n    commit\n    checkout release-v1\n    merge main tag: \"v1.1\"\n    checkout main\n    commit\n    branch release-v2\n    commit tag: \"v2.0\"\n    checkout main\n    commit\n    commit\n\n\n\n\n\n\n\n\nTrunk based development"
  },
  {
    "objectID": "2023-02-06-git-branch-lecture.html#branch-rules",
    "href": "2023-02-06-git-branch-lecture.html#branch-rules",
    "title": "Git Branching",
    "section": "Branch rules",
    "text": "Branch rules\n\nBranch strategies only work when rules are defined\nRules such as:\n\n‚ùå Not possible to push to main\n‚úÖ Code reviews required before a PR is merged\n‚úÖ Automated workflows (build and test) must pass before merge"
  },
  {
    "objectID": "2023-02-06-git-branch-lecture.html#branching-and-devops",
    "href": "2023-02-06-git-branch-lecture.html#branching-and-devops",
    "title": "Git Branching",
    "section": "Branching and DevOps",
    "text": "Branching and DevOps\n\nBranches present a unique mechanism by which to structure CI/CD\nUse automation tools to:\n\ncheck pull requests‚úÖ\ncreate releasesüéÅ\nand even ship to production üöõ\n\nAll powered through CI/CD tools like GitHub actions, TravisCI, Jenkins, GitLab CI/CD, Azure DevOps"
  },
  {
    "objectID": "2023-02-06-git-branch-lecture.html#summary",
    "href": "2023-02-06-git-branch-lecture.html#summary",
    "title": "Git Branching",
    "section": "Summary",
    "text": "Summary\n\nGit branches are a tool for safely working with copies of source code\nBranches enable teams of software developers to work effectively across a codebase\nBranching strategies and rules help safeguard this process\nGit branches integrate as a core part of modern DevOps pipelines"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto Collection Index",
    "section": "",
    "text": "This is a blank index page for my Quarto slides collection."
  },
  {
    "objectID": "index.html#slides",
    "href": "index.html#slides",
    "title": "Quarto Collection Index",
    "section": "Slides:",
    "text": "Slides:\n\nGit Branching lecture\nRust for research"
  }
]