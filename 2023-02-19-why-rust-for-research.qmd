---
title: "Why Rust for research ðŸ¦€"
format: 
    revealjs:
        navigation-mode: linear
        controls-layout: bottom-right
image: assets/img/2023-02-19-why-rust-for-research/rust-social-wide.jpg
---

# What is Rust?

- Programming language that came out of Mozilla
- Designed with an emphasis on security, peformance and usability 
- Initially popular for systems based programming but **very** flexible

# What is great about Rust?

```rust
fn main() {
    println!("Rust is great!")
}
```

## Safety

- Rust enforces memory safety
- Compiler checks references (pointers) at compile time
- Strongly and statically typed: all types must be known at compile time

## Performance

- No garbage collection
- Built ontop of LLVM toolchain

## Flexiblity

- Initially popular in the systems programming space
- But now applied to:
  - Embedded systems
  - Web (strong support for web assembly)
  - Online services
  - Machine learning backend ([Hugging Face Tokenizers](https://github.com/huggingface/tokenizers), [Pola.rs](https://www.pola.rs/))

## Zero cost abstractions

- Rust strives to provide high level concepts like Iterators, Generics, Traits
- But at no additional cost to use at runtime

## The compiler

- The compiler messages are helpful!
- Compiler knows about tests and documentation by default
- Enforces thread safety through types

## The toolchain

- Rustup, toolchain installer and manager
- Cargo, build system and package manager
- crates.io, package repository
- Clippy, Rust linter

## Python integration

- [PyO3](https://github.com/PyO3/pyo3)
- [maturin](https://github.com/PyO3/maturin)

## The community

- Rust Book
- This Week in Rust

# What is not so great about Rust...


```rust
error[E0382]: borrow of moved value: `hard`
 --> src/main.rs:4:26
  |
2 |     let hard = String::from("Rust is hard");
  |         ---- move occurs because `hard` has type `String`, which does not implement the `Copy` trait
3 |     let size = count_length(hard);
  |                             ---- value moved here
4 |     println!("{}: {:?}", hard, size);
  |                          ^^^^ value borrowed here after move
  |
note: consider changing this parameter type in function `count_length` to borrow instead if owning the value isn't necessary
 --> src/main.rs:8:20
```

## The compiler

## The learning curve

# Rust for research?

